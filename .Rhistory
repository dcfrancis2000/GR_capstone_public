mapping = aes(xintercept = Value,text = text),lwd = 0.5,
col = c('black',"blue",'red','red')
) +
theme_classic() + ylab('Frequency') + xlab('Estimate Value')
}
# Create side-by-side plots
plt <- subplot(
list(ggplotly(est_hist_wrapper('Log'), height = 400, width = 800),
ggplotly(est_hist_wrapper('Exp'), height = 400, width = 800)),
shareX = FALSE,shareY = FALSE,titleX = TRUE,titleY = TRUE,margin = 0.05
) %>% layout(
# Custom annotations indicating scale
annotations = list(
list(x = 0.155, y = 1.1,
text = "Log Scale",
showarrow = FALSE, xref = 'paper', yref = 'paper'),
list(x = 0.855, y = 1.1,
text = "Exponential Scale",
showarrow = FALSE, xref = 'paper', yref = 'paper')
))
plt
})
# Test statistic plotting
test_plots <- reactive({
chisq_index <- switch(input$test_term,
'Time' = 1,
'Time Quadratic' = 2,
'Location:Activity' = 3)
# single histogram for chosen term
plt <- ggplot(data = data.frame(Value = chisq_matrix[,chisq_index]),
mapping = aes(x = Value)) +
geom_histogram(fill = brown, color = gold, bins = 20) +
geom_vline(
data = data.frame(
Value = c(chisq_info$mean[chisq_index],
chisq_info$quants[,chisq_index],
chisq_info$cv[chisq_index]),
text = paste0(
'Critical value: Black',"<br>",
'Mean: Blue',"<br>",
'Interval bounds: Red')),
aes(xintercept = Value, text = text),lwd = 0.5,
col = c('blue', 'red', 'red', 'black')
) +
xlab(paste0('Chi-Square value (degrees of freedom ',
if(input$test_term == 'Location:Activity') 19 else 1,
')')) + ylab('Frequency') + theme_classic()
ggplotly(plt, width = 500, height = 400)
})
tc_plots <- reactive({
# first 2 elements of infos. belong to time and time quadratic
curve_vals <- coef_info$mean[1:2]
# quadratic curve
curve_funct <- function(x) curve_vals[1] * x + curve_vals[2] * x^2
# time at curve max (highest accident risk relative to 6 AM)
curve_max <- -curve_vals[1] / (2 * curve_vals[2])
# individual plot curves, both have different formulas
plot_log <- ggplot() + xlim(0, 16) + theme_classic() +
ylab('Change in Accident Log Odds') +
xlab('Hours from 6 AM') +
geom_function(lwd = 1, color = gold,
fun = curve_funct) +
geom_vline(data = data.frame(Maximum = curve_max),
aes(xintercept = Maximum,
text = paste0('Change in Log Odds at Maximum: ',
round(curve_funct(curve_max),3),
' log-times higher')),
col = 'black',lwd = 0.5)
plot_exp <- ggplot() + xlim(0, 16) + theme_classic() +
ylab('Change in Accident Odds') +
xlab('Hours from 6 AM') +
geom_function(lwd = 1, color = gold,
fun = function(x) exp(curve_funct(x))) +
geom_vline(data = data.frame(Maximum = curve_max),
aes(xintercept = Maximum,
text = paste0('Change in accident odds at maximum: ',
round(exp(curve_funct(curve_max)),3),
' times higher')),
col = 'black',lwd = 0.5)
plt <- subplot(list(ggplotly(plot_log,width = 800,height = 400),
ggplotly(plot_exp,width = 800,height = 400)),
shareX = TRUE,shareY = FALSE,titleY = TRUE,margin=0.05)
plt
})
# one-time Plotly call for a given input
output$plot_output <- renderPlotly({
switch(input$plotchoice,
'est' = estimate_plots(),
'test' = test_plots(),
'tc' = tc_plots())
})
# Explanation text below plots
output$text_output <- renderText({
switch(input$plotchoice,
'est' = 'Time terms represent change in log odds/odds with respect to time, location:activity terms are the accident log odds/odds ratio between that term and MAC basketball.',
'test' = 'When making conclusions regarding the Likelihood Ratio Test samples, the mean test statistic was used, which was consistent with the coefficient estimate results.',
'tc' = 'Note that this curve, without including the intercept, represents the estimated change in accident log odds/odds for an increase in hours. This curve uses the means of the empirical distributions.')
})
}
shinyApp(ui = ui, server = server)
# App Server: generate plot based on input
server <- function(input, output) {
# ggplot thinks "text" is an unknown aesthetic but it works?
options(warn = 0)
# For coefficient estimate plotting
plot_data <- data.frame(
value = c(coef_matrix[,-1], or_matrix[,-1]), # Removing Intercept Term
scale = rep(c('Log', 'Exp'), each = (p - 1) * n.iter),
colname = rep(rep(termnames, each = n.iter), 2))
# Coefficient estimate plotting
estimate_plots <- reactive({
name <- input$est_term
# post-process indexing
term_index <- which(termnames == name)
# Histograms are identical in format between scales, so a wrapping function keeps code clean
est_hist_wrapper <- function(x) {
# Plots histograms, quantile intervals on both scales
info <- if(x == 'Log') coef_info else or_info
interesting_number <- if(x == 'Log') 0 else 1
temp_data <- subset(plot_data, colname == name & scale == x)
# line intercepts to help gauge effects
line_vals <- c(interesting_number,info$mean[term_index],
info$quants[,term_index])
# histogram plot
ggplot(data = temp_data, aes(x = value)) +
geom_histogram(fill = brown, color = gold, bins = 20) +
geom_vline(
data = data.frame(
Value = line_vals,
text = paste0(
'No-effect value: Black',"<br>",
'Mean: Blue',"<br>",
'Interval bounds: Red')),
mapping = aes(xintercept = Value,text = text),lwd = 0.5,
col = c('black',"blue",'red','red')
) +
theme_classic() + ylab('Frequency') + xlab('Estimate Value')
}
# Create side-by-side plots
plt <- subplot(
list(ggplotly(est_hist_wrapper('Log'), height = 400, width = 800),
ggplotly(est_hist_wrapper('Exp'), height = 400, width = 800)),
shareX = FALSE,shareY = FALSE,titleX = TRUE,titleY = TRUE,margin = 0.05
) %>% layout(
# Custom annotations indicating scale
annotations = list(
list(x = 0.155, y = 1.1,
text = "Log Scale",
showarrow = FALSE, xref = 'paper', yref = 'paper'),
list(x = 0.855, y = 1.1,
text = "Exponential Scale",
showarrow = FALSE, xref = 'paper', yref = 'paper')
))
plt
})
# Test statistic plotting
test_plots <- reactive({
chisq_index <- switch(input$test_term,
'Time' = 1,
'Time Quadratic' = 2,
'Location:Activity' = 3)
# single histogram for chosen term
plt <- ggplot(data = data.frame(Value = chisq_matrix[,chisq_index]),
mapping = aes(x = Value)) +
geom_histogram(fill = brown, color = gold, bins = 20) +
geom_vline(
data = data.frame(
Value = c(chisq_info$mean[chisq_index],
chisq_info$quants[,chisq_index],
chisq_info$cv[chisq_index]),
text = paste0(
'Critical value: Black',"<br>",
'Mean: Blue',"<br>",
'Interval bounds: Red')),
aes(xintercept = Value, text = text),lwd = 0.5,
col = c('blue', 'red', 'red', 'black')
) +
xlab(paste0('Chi-Square value (degrees of freedom ',
if(input$test_term == 'Location:Activity') 19 else 1,
')')) + ylab('Frequency') + theme_classic()
ggplotly(plt, width = 500, height = 400)
})
tc_plots <- reactive({
# first 2 elements of infos. belong to time and time quadratic
curve_vals <- coef_info$mean[1:2]
# quadratic curve
curve_funct <- function(x) curve_vals[1] * x + curve_vals[2] * x^2
# time at curve max (highest accident risk relative to 6 AM)
curve_max <- -curve_vals[1] / (2 * curve_vals[2])
# individual plot curves, both have different formulas
plot_log <- ggplot() + xlim(0, 16) + theme_classic() +
ylab('Change in Accident Log Odds') +
xlab('Hours from 6 AM') +
geom_function(lwd = 1, color = gold,
fun = curve_funct) +
geom_vline(data = data.frame(Maximum = curve_max),
aes(xintercept = Maximum,
text = paste0('Change in Log Odds at Maximum: ',
round(curve_funct(curve_max),3),
' log-times higher')),
col = 'black',lwd = 0.5)
plot_exp <- ggplot() + xlim(0, 16) + theme_classic() +
ylab('Change in Accident Odds') +
xlab('Hours from 6 AM') +
geom_function(lwd = 1, color = gold,
fun = function(x) exp(curve_funct(x))) +
geom_vline(data = data.frame(Maximum = curve_max),
aes(xintercept = Maximum,
text = paste0('Change in accident odds at maximum: ',
round(exp(curve_funct(curve_max)),3),
' times higher')),
col = 'black',lwd = 0.5)
plt <- subplot(list(ggplotly(plot_log,width = 800,height = 400),
ggplotly(plot_exp,width = 800,height = 400)),
shareX = TRUE,shareY = FALSE,titleY = TRUE,margin=0.05)
plt
})
# one-time Plotly call for a given input
output$plot_output <- renderPlotly({
switch(input$plotchoice,
'est' = estimate_plots(),
'test' = test_plots(),
'tc' = tc_plots())
})
# Explanation text below plots
output$text_output <- renderText({
switch(input$plotchoice,
'est' = 'Location:Activity term estimates represent the accident log odds/odds ratio between those terms and MAC basketball at the same hour.',
'test' = 'When making conclusions regarding the Likelihood Ratio Test samples, the mean test statistic was used, which was consistent with the coefficient estimate results.',
'tc' = 'Note that this curve, without including the intercept, represents the estimated change in accident log odds/odds for an increase in hours, multiplicatively. This curve uses the means of the empirical distributions.')
})
}
shinyApp(ui = ui, server = server)
# App Server: generate plot based on input
server <- function(input, output) {
# ggplot thinks "text" is an unknown aesthetic but it works?
options(warn = 0)
# For coefficient estimate plotting
plot_data <- data.frame(
value = c(coef_matrix[,-1], or_matrix[,-1]), # Removing Intercept Term
scale = rep(c('Log', 'Exp'), each = (p - 1) * n.iter),
colname = rep(rep(termnames, each = n.iter), 2))
# Coefficient estimate plotting
estimate_plots <- reactive({
name <- input$est_term
# post-process indexing
term_index <- which(termnames == name)
# Histograms are identical in format between scales, so a wrapping function keeps code clean
est_hist_wrapper <- function(x) {
# Plots histograms, quantile intervals on both scales
info <- if(x == 'Log') coef_info else or_info
interesting_number <- if(x == 'Log') 0 else 1
temp_data <- subset(plot_data, colname == name & scale == x)
# line intercepts to help gauge effects
line_vals <- c(interesting_number,info$mean[term_index],
info$quants[,term_index])
# histogram plot
ggplot(data = temp_data, aes(x = value)) +
geom_histogram(fill = brown, color = gold, bins = 20) +
geom_vline(
data = data.frame(
Value = line_vals,
text = paste0(
'No-effect value: Black',"<br>",
'Mean: Blue',"<br>",
'Interval bounds: Red')),
mapping = aes(xintercept = Value,text = text),lwd = 0.5,
col = c('black',"blue",'red','red')
) +
theme_classic() + ylab('Frequency') + xlab('Estimate Value')
}
# Create side-by-side plots
plt <- subplot(
list(ggplotly(est_hist_wrapper('Log'), height = 400, width = 800),
ggplotly(est_hist_wrapper('Exp'), height = 400, width = 800)),
shareX = FALSE,shareY = FALSE,titleX = TRUE,titleY = TRUE,margin = 0.05
) %>% layout(
# Custom annotations indicating scale
annotations = list(
list(x = 0.155, y = 1.1,
text = "Log Scale",
showarrow = FALSE, xref = 'paper', yref = 'paper'),
list(x = 0.855, y = 1.1,
text = "Exponential Scale",
showarrow = FALSE, xref = 'paper', yref = 'paper')
))
plt
})
# Test statistic plotting
test_plots <- reactive({
chisq_index <- switch(input$test_term,
'Time' = 1,
'Time Quadratic' = 2,
'Location:Activity' = 3)
# single histogram for chosen term
plt <- ggplot(data = data.frame(Value = chisq_matrix[,chisq_index]),
mapping = aes(x = Value)) +
geom_histogram(fill = brown, color = gold, bins = 20) +
geom_vline(
data = data.frame(
Value = c(chisq_info$mean[chisq_index],
chisq_info$quants[,chisq_index],
chisq_info$cv[chisq_index]),
text = paste0(
'Critical value: Black',"<br>",
'Mean: Blue',"<br>",
'Interval bounds: Red')),
aes(xintercept = Value, text = text),lwd = 0.5,
col = c('blue', 'red', 'red', 'black')
) +
xlab(paste0('Chi-Square value (degrees of freedom ',
if(input$test_term == 'Location:Activity') 19 else 1,
')')) + ylab('Frequency') + theme_classic()
ggplotly(plt, width = 500, height = 400)
})
tc_plots <- reactive({
# first 2 elements of infos. belong to time and time quadratic
curve_vals <- coef_info$mean[1:2]
# quadratic curve
curve_funct <- function(x) curve_vals[1] * x + curve_vals[2] * x^2
# time at curve max (highest accident risk relative to 6 AM)
curve_max <- -curve_vals[1] / (2 * curve_vals[2])
# individual plot curves, both have different formulas
plot_log <- ggplot() + xlim(0, 16) + theme_classic() +
ylab('Change in Accident Log Odds') +
xlab('Hours from 6 AM') +
geom_function(lwd = 1, color = gold,
fun = curve_funct) +
geom_vline(data = data.frame(Critical = curve_max),
aes(xintercept = Critical,
text = paste0('Maximum change in estimated accident log odds: ',
round(curve_funct(curve_max),3),
' log-times higher')),
col = 'black',lwd = 0.5)
plot_exp <- ggplot() + xlim(0, 16) + theme_classic() +
ylab('Change in Accident Odds') +
xlab('Hours from 6 AM') +
geom_function(lwd = 1, color = gold,
fun = function(x) exp(curve_funct(x))) +
geom_vline(data = data.frame(Critical = curve_max),
aes(xintercept = Critical,
text = paste0('Maximum change in estimated accident odds: ',
round(exp(curve_funct(curve_max)),3),
' times higher')),
col = 'black',lwd = 0.5)
plt <- subplot(list(ggplotly(plot_log,width = 800,height = 400),
ggplotly(plot_exp,width = 800,height = 400)),
shareX = TRUE,shareY = FALSE,titleY = TRUE,margin=0.05)
plt
})
# one-time Plotly call for a given input
output$plot_output <- renderPlotly({
switch(input$plotchoice,
'est' = estimate_plots(),
'test' = test_plots(),
'tc' = tc_plots())
})
# Explanation text below plots
output$text_output <- renderText({
switch(input$plotchoice,
'est' = 'Location:Activity term estimates represent the accident log odds/odds ratio between those terms and MAC basketball at the same hour.',
'test' = 'When making conclusions regarding the Likelihood Ratio Test samples, the mean test statistic was used, which was consistent with the coefficient estimate results.',
'tc' = 'Note that this curve, without including the intercept, represents the estimated change in accident log odds/odds for an increase in hours, multiplicatively. This curve uses the means of the empirical distributions.')
})
}
shinyApp(ui = ui, server = server)
# App Server: generate plot based on input
server <- function(input, output) {
# ggplot thinks "text" is an unknown aesthetic but it works?
options(warn = 0)
# For coefficient estimate plotting
plot_data <- data.frame(
value = c(coef_matrix[,-1], or_matrix[,-1]), # Removing Intercept Term
scale = rep(c('Log', 'Exp'), each = (p - 1) * n.iter),
colname = rep(rep(termnames, each = n.iter), 2))
# Coefficient estimate plotting
estimate_plots <- reactive({
name <- input$est_term
# post-process indexing
term_index <- which(termnames == name)
# Histograms are identical in format between scales, so a wrapping function keeps code clean
est_hist_wrapper <- function(x) {
# Plots histograms, quantile intervals on both scales
info <- if(x == 'Log') coef_info else or_info
interesting_number <- if(x == 'Log') 0 else 1
temp_data <- subset(plot_data, colname == name & scale == x)
# line intercepts to help gauge effects
line_vals <- c(interesting_number,info$mean[term_index],
info$quants[,term_index])
# histogram plot
ggplot(data = temp_data, aes(x = value)) +
geom_histogram(fill = brown, color = gold, bins = 20) +
geom_vline(
data = data.frame(
Value = line_vals,
text = paste0(
'No-effect value: Black',"<br>",
'Mean: Blue',"<br>",
'Interval bounds: Red')),
mapping = aes(xintercept = Value,text = text),lwd = 0.5,
col = c('black',"blue",'red','red')
) +
theme_classic() + ylab('Frequency') + xlab('Estimate Value')
}
# Create side-by-side plots
plt <- subplot(
list(ggplotly(est_hist_wrapper('Log'), height = 400, width = 800),
ggplotly(est_hist_wrapper('Exp'), height = 400, width = 800)),
shareX = FALSE,shareY = FALSE,titleX = TRUE,titleY = TRUE,margin = 0.05
) %>% layout(
# Custom annotations indicating scale
annotations = list(
list(x = 0.155, y = 1.1,
text = "Log Scale",
showarrow = FALSE, xref = 'paper', yref = 'paper'),
list(x = 0.855, y = 1.1,
text = "Exponential Scale",
showarrow = FALSE, xref = 'paper', yref = 'paper')
))
plt
})
# Test statistic plotting
test_plots <- reactive({
chisq_index <- switch(input$test_term,
'Time' = 1,
'Time Quadratic' = 2,
'Location:Activity' = 3)
# single histogram for chosen term
plt <- ggplot(data = data.frame(Value = chisq_matrix[,chisq_index]),
mapping = aes(x = Value)) +
geom_histogram(fill = brown, color = gold, bins = 20) +
geom_vline(
data = data.frame(
Value = c(chisq_info$mean[chisq_index],
chisq_info$quants[,chisq_index],
chisq_info$cv[chisq_index]),
text = paste0(
'Critical value: Black',"<br>",
'Mean: Blue',"<br>",
'Interval bounds: Red')),
aes(xintercept = Value, text = text),lwd = 0.5,
col = c('blue', 'red', 'red', 'black')
) +
xlab(paste0('Chi-Square value (degrees of freedom ',
if(input$test_term == 'Location:Activity') 19 else 1,
')')) + ylab('Frequency') + theme_classic()
ggplotly(plt, width = 500, height = 400)
})
tc_plots <- reactive({
# first 2 elements of infos. belong to time and time quadratic
curve_vals <- coef_info$mean[1:2]
# quadratic curve
curve_funct <- function(x) curve_vals[1] * x + curve_vals[2] * x^2
# time at curve max (highest accident risk relative to 6 AM)
curve_max <- -curve_vals[1] / (2 * curve_vals[2])
# individual plot curves, both have different formulas
plot_log <- ggplot() + xlim(0, 16) + theme_classic() +
ylab('Change in Accident Log Odds') +
xlab('Hours from 6 AM') +
geom_function(lwd = 1, color = gold,
fun = curve_funct) +
geom_vline(data = data.frame(Critical = curve_max),
aes(xintercept = Critical,
text = paste0('Maximum change: ',
round(curve_funct(curve_max),3),
' log-times')),
col = 'black',lwd = 0.5)
plot_exp <- ggplot() + xlim(0, 16) + theme_classic() +
ylab('Change in Accident Odds') +
xlab('Hours from 6 AM') +
geom_function(lwd = 1, color = gold,
fun = function(x) exp(curve_funct(x))) +
geom_vline(data = data.frame(Critical = curve_max),
aes(xintercept = Critical,
text = paste0('Maximum change: ',
round(exp(curve_funct(curve_max)),3),
' times')),
col = 'black',lwd = 0.5)
plt <- subplot(list(ggplotly(plot_log,width = 800,height = 400),
ggplotly(plot_exp,width = 800,height = 400)),
shareX = TRUE,shareY = FALSE,titleY = TRUE,margin=0.05)
plt
})
# one-time Plotly call for a given input
output$plot_output <- renderPlotly({
switch(input$plotchoice,
'est' = estimate_plots(),
'test' = test_plots(),
'tc' = tc_plots())
})
# Explanation text below plots
output$text_output <- renderText({
switch(input$plotchoice,
'est' = 'Location:Activity term estimates represent the accident log odds/odds ratio between those terms and MAC basketball at the same hour.',
'test' = 'When making conclusions regarding the Likelihood Ratio Test samples, the mean test statistic was used, which was consistent with the coefficient estimate results.',
'tc' = 'Note that this curve, without including the intercept, represents the estimated change in accident log odds/odds for an increase in hours, multiplicatively. This curve uses the means of the empirical distributions.')
})
}
shinyApp(ui = ui, server = server)
?shinyApp
?sourc e
?source
runApp('C:/Users/Daiven/Desktop/WEST_SCRIPT.R')
runApp('C:/Users/Daiven/Desktop/WEST_SCRIPT.R')
runApp('C:/Users/Daiven/Desktop/WEST_SCRIPT.R')
shinyApp(ui = ui,server = server,launch.browser = TRUE)
runApp(ui = ui,server = server,launch.browser = TRUE)
?runApp
?shinyApp
shinyApp(ui = ui,server = server,options = list(launch.browser = TRUE))
runApp('C:/Users/Daiven/Desktop/WEST_SCRIPT.R')
runApp('C:/Users/Daiven/Desktop/WEST_SCRIPT.R')
