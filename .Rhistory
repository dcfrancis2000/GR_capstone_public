vald_wide2$DATE %in% dates & as.numeric(vald_wide2$REP) <= 2,
c(2,3,1,6:(ncol(vald_wide)))
] %>%
dplyr::select(-(problematic_metrics))
# sum(apply(vald_wide2,2,is.na))
replacebadcells <- function(x) as.numeric(replace(x,(is.na(x) | as.numeric(x)==0) | is.nan(x),
mean(na.omit(as.numeric(x)))))
sum(apply(vald_wide2,2,is.na))
vald_wide2 <- vald_wide2[
vald_wide2$DATE %in% dates & as.numeric(vald_wide2$REP) <= 2,
c(2,3,1,6:(ncol(vald_wide)))
] %>%
dplyr::select(-(problematic_metrics)) %>% replace_na(colMeans(.))
vald_wide2 <- cbind(reps,vald_wide)
vald_wide2 <- vald_wide2[
vald_wide2$DATE %in% dates & as.numeric(vald_wide2$REP) <= 2,
c(2,3,1,6:(ncol(vald_wide)))
] %>%
dplyr::select(-(problematic_metrics)) %>% replace_na(colMeans(.))
?replace_na
vald_wide <- pivot_wider(
vald,
id_cols = c(athlete_id,name,trial_date,test_id,trial_id),
names_from = metric_name,
values_from = value,
values_fn = median
)
vald_wide <- vald_wide[order(vald_wide$test_id),-1] # order necessary for reps
colnames(vald_wide) <- c('ATHLETE','DATE',snakecase::to_screaming_snake_case(colnames(vald_wide)[-(1:2)]))
reps <- vald_wide %>% group_by(TEST_ID) %>%
summarise(REP = 1:n()) %>% ungroup() %>% dplyr::select(REP) %>% as.matrix()
vald_final <-
cbind(reps,vald_wide)[
vald_wide2$DATE %in% dates & as.numeric(vald_wide2$REP) <= 2,
c(2,3,1,6:(ncol(vald_wide)))
] %>%
dplyr::select(-(problematic_metrics)) %>%
mutate_at(c("ATHLETE","REP","DATE"),as.factor) %>%
mutate_if(as.numeric,replacebadcells)
vald_final <-
cbind(reps,vald_wide)[
vald_wide2$DATE %in% dates & as.numeric(vald_wide2$REP) <= 2,
c(2,3,1,6:(ncol(vald_wide)))
] %>%
dplyr::select(-(problematic_metrics)) %>%
mutate_at(c("ATHLETE","REP","DATE"),as.factor) %>%
mutate_if(is.numeric,replacebadcells)
View(vald_final)
# Vald
replacebadcells <- function(x) as.numeric(replace(x,(is.na(x) | as.numeric(x)==0) | is.nan(x),
mean(na.omit(as.numeric(x)))))
dates <- unique(kin_final$DATE)
problematic_metrics <- c('JUMP_HEIGHT_FLIGHT_TIME','CONCENTRIC_MAXIMUM_RFD')
vald$trial_date <- as.Date(vald$trial_date)
vald_wide <- pivot_wider(
vald,
id_cols = c(athlete_id,name,trial_date,test_id,trial_id),
names_from = metric_name,
values_from = value,
values_fn = median
)
vald_wide <- vald_wide[order(vald_wide$test_id),-1] # order necessary for reps
colnames(vald_wide) <- c('ATHLETE','DATE',
to_screaming_snake_case(colnames(vald_wide)[-(1:2)]))
library(snakecase)
replacebadcells <- function(x) as.numeric(replace(x,(is.na(x) | as.numeric(x)==0) | is.nan(x),
mean(na.omit(as.numeric(x)))))
dates <- unique(kin_final$DATE)
problematic_metrics <- c('JUMP_HEIGHT_FLIGHT_TIME','CONCENTRIC_MAXIMUM_RFD')
vald$trial_date <- as.Date(vald$trial_date)
vald_wide <- pivot_wider(
vald,
id_cols = c(athlete_id,name,trial_date,test_id,trial_id),
names_from = metric_name,
values_from = value,
values_fn = median
)
vald_wide <- vald_wide[order(vald_wide$test_id),-1] # order necessary for reps
colnames(vald_wide) <- c('ATHLETE','DATE',
to_screaming_snake_case(colnames(vald_wide)[-(1:2)]))
reps <- vald_wide %>% group_by(TEST_ID) %>%
summarise(REP = 1:n()) %>% ungroup() %>% dplyr::select(REP) %>% as.matrix()
vald_final <-
cbind(reps,vald_wide)[
vald_wide2$DATE %in% dates &
as.numeric(vald_wide2$REP) <= 2, # first 2 reps only
c(2,3,1,6:(ncol(vald_wide))) # order columns
] %>%
dplyr::select(-(problematic_metrics)) %>%
mutate_at(c("ATHLETE", "REP", "DATE"), as.factor) %>%
mutate_if(is.numeric, replacebadcells) # mean imputation
timevec <- difftime(kin$dtstop, kin$dtstart,'UTC','mins') # measurement time
kin$time <- timevec
kin$phasename <- factor(gsub("\\D", "", kin$phasename),levels = 1:10)
kin$half <- as.factor(ifelse(as.numeric(kin$phasename) <= 5,1,2))
# Aggregated as one observation per game half, two per person per game
kin_final <- subset(kin, phasename != "Segment 11 (OT)") %>% # no overtime
mutate_at(c("playerid","sessionid","phaseid"),as.factor) %>%
mutate_at(c("dtstart","dtstop"), as.Date) %>%
group_by(playername,sessionid,half) %>%
summarize(
date = as.factor(dtstart),
time = as.numeric(sum(time)),
aal = sum(aal),
speedmax = max(speedmax),
jumps = sum(jumps),
physioload = sum(physioload),
exertions = sum(exertions),
distance = sum(distancetotal)
) %>% distinct() %>% ungroup() %>%
dplyr::select(-c(sessionid,))
colnames(kin_final) <- c('ATHLETE','HALF','DATE','TIME','AAL','SPEEDMAX','JUMPS','PHYSIOLOAD','EXERTIONS','DISTANCE')
full_data <- merge(kin_final,vald_final,all.x = TRUE) |> na.exclude()
View(full_data)
source('./reliability_testing.R')
instance <- get_reliability_instance(vald_final)
# reliable metrics for at least 4/5 players
reliable_index <- apply(instance,1,sum) >= 3
colnames(full_data)
cut_data <- full_data[,as.logical(c(rep(1,10),0,reliable_index))]
View(cut_data)
sum(reliable_index)
# reliable metrics for at least 4/5 players
reliable_index <- apply(instance,1,sum) >= 2
sum(reliable_index)
# reliable metrics for at least 4/5 players
reliable_index <- apply(instance,1,sum) >= 1
sum(reliable_index)
# reliable metrics for at least 4/5 players
reliable_index <- apply(instance,1,sum) >= 2
cut_data <- full_data[,as.logical(c(rep(1,10),0,reliable_index))]
View(cut_data)
ML_data <- cut_data %>% dplyr::select(-REP) %>%
mutate_at(1:3,as.factor) %>%
mutate_at(-(1:3),as.numeric) %>%
group_by(ATHLETE,DATE,HALF) %>% distinct() %>% ungroup()
ML_data <- full_data[,as.logical(c(rep(1,10),0,reliable_index))]
View(ML_data)
write.csv(ML_data,'./data/ML_data.csv')
################################################################################
# Plotting
data <- read.csv('./data/ML_data.csv')[,-1]
data_kinexon <- data[,1:10]
data_kinexon
data_kinexon$ATHLETE <- as.numeric(as.factor(data_kinexon$ATHLETE))
kin_long <- data_kinexon %>% pivot_longer(cols = 5:10,names_to = 'METRIC',values_to = 'VALUE')
pdf('./plots_summaries/scraped_kinexon_metrics.pdf',width=10,height=8)
for(ath in unique(data_kinexon$ATHLETE)) {
kin_temp <- subset(kin_long,ATHLETE == ath)
plt <- ggplot(data=kin_temp,aes(x=as.numeric(HALF),y=VALUE,color=DATE)) +
facet_wrap(~METRIC,scales='free') +
geom_line(lwd=0.75) + geom_point() +  theme_classic() + xlab('HALF') +
scale_x_continuous(breaks=1:10) +
ggtitle(paste0('Kinexon Metrics for Player ',ath))
print(plt)
}
graphics.off()
pdf('./plots_summaries/scraped_metrics_time.pdf',width=10,height=8)
for(ath in unique(data_kinexon$ATHLETE)) {
kin_temp <- subset(kin_long,ATHLETE == ath)
plt <- ggplot(data = kin_temp,aes(x = TIME,y=VALUE,color=as.factor(HALF))) +
facet_wrap(~METRIC,scales='free') +
geom_point() +  theme_classic() + xlab('TIME') +
ggtitle(paste0('Kinexon Metrics for Player ',ath,' Over Time of Measurement')) +
geom_smooth(method = 'lm',lwd=1,fill = 'lightgray')
print(plt)
}
graphics.off()
################################################################################
# Plotting
library(ggplot2)
pdf('./plots_summaries/scraped_metrics_time.pdf',width=10,height=8)
for(ath in unique(data_kinexon$ATHLETE)) {
kin_temp <- subset(kin_long,ATHLETE == ath)
plt <- ggplot(data = kin_temp,aes(x = TIME,y=VALUE,color=as.factor(HALF))) +
facet_wrap(~METRIC,scales='free') +
geom_point() +  theme_classic() + xlab('TIME') +
ggtitle(paste0('Kinexon Metrics for Player ',ath,' Over Time of Measurement')) +
geom_smooth(method = 'lm',lwd=1,fill = 'lightgray') +
guides(fill=guide_legend(title="HALF"))
print(plt)
}
graphics.off()
pdf('./plots_summaries/scraped_metrics_time.pdf',width=10,height=8)
for(ath in unique(data_kinexon$ATHLETE)) {
kin_temp <- subset(kin_long,ATHLETE == ath)
plt <- ggplot(data = kin_temp,aes(x = TIME,y=VALUE,color=as.factor(HALF))) +
facet_wrap(~METRIC,scales='free') +
geom_point() +  theme_classic() + xlab('TIME') +
ggtitle(paste0('Kinexon Metrics for Player ',ath,' Over Time of Measurement')) +
geom_smooth(method = 'lm',lwd=1,fill = 'lightgray') +
scale_x_continuous(name = "HALF")
print(plt)
}
graphics.off()
pdf('./plots_summaries/scraped_metrics_time.pdf',width=10,height=8)
for(ath in unique(data_kinexon$ATHLETE)) {
kin_temp <- subset(kin_long,ATHLETE == ath)
plt <- ggplot(data = kin_temp,aes(x = TIME,y=VALUE,color=as.factor(HALF))) +
facet_wrap(~METRIC,scales='free') +
geom_point() +  theme_classic() + xlab('TIME') +
ggtitle(paste0('Kinexon Metrics for Player ',ath,' Over Time of Measurement')) +
geom_smooth(method = 'lm',lwd=1,fill = 'lightgray') +
scale_color_discrete(name = 'HALF')
print(plt)
}
graphics.off()
kin <- read.csv('./data/kinexon_scraped.csv')
timevec <- difftime(kin$dtstop, kin$dtstart,'UTC','mins') # measurement time
kin$time <- timevec
kin$phasename <- factor(gsub("\\D", "", kin$phasename),levels = 1:10)
kin$half <- as.factor(ifelse(as.numeric(kin$phasename) <= 5,1,2))
# Aggregated as one observation per game half, two per person per game
kin_final <- subset(kin, phasename != "Segment 11 (OT)") %>% # no overtime
mutate_at(c("playerid","sessionid","phaseid"),as.factor) %>%
mutate_at(c("dtstart","dtstop"), as.Date) %>%
group_by(playername,sessionid,phasename) %>%
summarize(
date = as.factor(dtstart),
time = as.numeric(sum(time)),
aal = sum(aal),
speedmax = max(speedmax),
jumps = sum(jumps),
physioload = sum(physioload),
exertions = sum(exertions),
distance = sum(distancetotal)
) %>% distinct() %>% ungroup() %>%
dplyr::select(-c(sessionid,))
# Aggregated as one observation per game half, two per person per game
kin_final <- subset(kin, phasename != "Segment 11 (OT)") %>% # no overtime
mutate_at(c("playerid","sessionid","phaseid"),as.factor) %>%
mutate_at(c("dtstart","dtstop"), as.Date) %>%
group_by(playername,sessionid,phasename) %>%
summarize(
date = as.factor(dtstart),
time = as.numeric(sum(time)),
aal = sum(aal),
speedmax = max(speedmax),
jumps = sum(jumps),
physioload = sum(physioload),
exertions = sum(exertions),
distance = sum(distancetotal)
) %>% distinct() %>% ungroup() %>%
dplyr::select(-c(sessionid,phasename))
colnames(kin_final) <- c('ATHLETE','HALF','DATE','TIME','AAL','SPEEDMAX','JUMPS','PHYSIOLOAD','EXERTIONS','DISTANCE')
View(kin_final)
kin_final <- subset(kin, phasename != "Segment 11 (OT)") %>% # no overtime
mutate_at(c("playerid","sessionid","phaseid"),as.factor) %>%
mutate_at(c("dtstart","dtstop"), as.Date) %>%
group_by(playername,sessionid,phasename) %>%
summarize(
date = as.factor(dtstart),
time = as.numeric(sum(time)),
aal = sum(aal),
speedmax = max(speedmax),
jumps = sum(jumps),
physioload = sum(physioload),
exertions = sum(exertions),
distance = sum(distancetotal)
) %>% distinct() %>% ungroup() %>%
dplyr::select(-c(sessionid,phasename))
View(kin_final)
dplyr::select(-c(sessionid,phasename))
# Aggregated as one observation per game half, two per person per game
kin_final <- subset(kin, phasename != "Segment 11 (OT)") %>% # no overtime
mutate_at(c("playerid","sessionid","phaseid"),as.factor) %>%
mutate_at(c("dtstart","dtstop"), as.Date) %>%
group_by(playername,sessionid,phasename) %>%
summarize(
half = half,
date = as.factor(dtstart),
time = as.numeric(sum(time)),
aal = sum(aal),
speedmax = max(speedmax),
jumps = sum(jumps),
physioload = sum(physioload),
exertions = sum(exertions),
distance = sum(distancetotal)
) %>% distinct() %>% ungroup() %>%
dplyr::select(-c(sessionid,phasename))
View(kin_final)
colnames(kin_final) <- c('ATHLETE','HALF','DATE','TIME','AAL','SPEEDMAX','JUMPS','PHYSIOLOAD','EXERTIONS','DISTANCE')
View(kin_final)
replacebadcells <- function(x) as.numeric(replace(x,(is.na(x) | as.numeric(x)==0) | is.nan(x),
mean(na.omit(as.numeric(x)))))
dates <- unique(kin_final$DATE)
problematic_metrics <- c('JUMP_HEIGHT_FLIGHT_TIME','CONCENTRIC_MAXIMUM_RFD')
vald$trial_date <- as.Date(vald$trial_date)
vald_wide <- pivot_wider(
vald,
id_cols = c(athlete_id,name,trial_date,test_id,trial_id),
names_from = metric_name,
values_from = value,
values_fn = median
)
vald_wide <- vald_wide[order(vald_wide$test_id),-1] # order necessary for reps
colnames(vald_wide) <- c('ATHLETE','DATE',
to_screaming_snake_case(colnames(vald_wide)[-(1:2)]))
reps <- vald_wide %>% group_by(TEST_ID) %>%
summarise(REP = 1:n()) %>% ungroup() %>% dplyr::select(REP) %>% as.matrix()
vald_final <-
cbind(reps,vald_wide)[
vald_wide2$DATE %in% dates &
as.numeric(vald_wide2$REP) <= 2, # first 2 reps only
c(2,3,1,6:(ncol(vald_wide))) # order columns
] %>%
dplyr::select(-(problematic_metrics)) %>%
mutate_at(c("ATHLETE", "REP", "DATE"), as.factor) %>%
mutate_if(is.numeric, replacebadcells) # mean imputation
################################################################################
# Merging Datasets
full_data <- merge(kin_final,vald_final,all.x = TRUE) |> na.exclude()
source('./reliability_testing.R')
instance <- get_reliability_instance(vald_final)
# reliable metrics for at least 4/5 players
reliable_index <- apply(instance,1,sum) >= 2
ML_data <- full_data[,as.logical(c(rep(1,10),0,reliable_index))]
write.csv(ML_data,'./data/ML_data.csv')
View(ML_data)
data <- read.csv('./data/ML_data.csv')[,-1]
data_kinexon <- data[,1:10]
data_kinexon$ATHLETE <- as.numeric(as.factor(data_kinexon$ATHLETE))
kin_long <- data_kinexon %>% pivot_longer(cols = 5:10,names_to = 'METRIC',values_to = 'VALUE')
pdf('./plots_summaries/scraped_kinexon_metrics.pdf',width=10,height=8)
for(ath in unique(data_kinexon$ATHLETE)) {
kin_temp <- subset(kin_long,ATHLETE == ath)
plt <- ggplot(data=kin_temp,aes(x=as.numeric(HALF),y=VALUE,color=DATE)) +
facet_wrap(~METRIC,scales='free') +
geom_line(lwd=0.75) + geom_point() +  theme_classic() + xlab('HALF') +
scale_x_continuous(breaks=1:10) +
ggtitle(paste0('Kinexon Metrics for Player ',ath))
print(plt)
}
graphics.off()
pdf('./plots_summaries/scraped_kinexon_metrics.pdf',width=10,height=8)
for(ath in unique(data_kinexon$ATHLETE)) {
kin_temp <- subset(kin_long,ATHLETE == ath)
plt <- ggplot(data=kin_temp,aes(x=as.numeric(HALF),y=VALUE,color=DATE)) +
facet_wrap(~METRIC,scales='free') +
geom_smooth(lwd=0.75,method='lm',se=F) + geom_point() +  theme_classic() + xlab('HALF') +
scale_x_continuous(breaks=1:10) +
ggtitle(paste0('Kinexon Metrics for Player ',ath))
print(plt)
}
graphics.off()
pdf('./plots_summaries/scraped_metrics_time.pdf',width=10,height=8)
for(ath in unique(data_kinexon$ATHLETE)) {
kin_temp <- subset(kin_long,ATHLETE == ath)
plt <- ggplot(data = kin_temp,aes(x = TIME,y=VALUE,color=as.factor(HALF))) +
facet_wrap(~METRIC,scales='free') +
geom_point() +  theme_classic() + xlab('TIME') +
ggtitle(paste0('Kinexon Metrics for Player ',ath,' Over Time of Measurement')) +
geom_smooth(method = 'lm',lwd=1,fill = 'lightgray') +
scale_color_discrete(name = 'HALF')
print(plt)
}
graphics.off()
timevec <- difftime(kin$dtstop, kin$dtstart,'UTC','mins') # measurement time
kin$time <- timevec
kin$phasename <- factor(gsub("\\D", "", kin$phasename),levels = 1:10)
kin$half <- as.factor(ifelse(as.numeric(kin$phasename) <= 5,1,2))
# Aggregated as one observation per game half, two per person per game
kin_final <- subset(kin, phasename != "Segment 11 (OT)") %>% # no overtime
mutate_at(c("playerid","sessionid","phaseid"),as.factor) %>%
mutate_at(c("dtstart","dtstop"), as.Date) %>%
group_by(playername,sessionid,half) %>%
summarize(
date = as.factor(dtstart),
time = as.numeric(sum(time)),
aal = sum(aal),
speedmax = max(speedmax),
jumps = sum(jumps),
physioload = sum(physioload),
exertions = sum(exertions),
distance = sum(distancetotal)
) %>% distinct() %>% ungroup() %>%
dplyr::select(-c(sessionid))
colnames(kin_final) <- c('ATHLETE','HALF','DATE','TIME','AAL','SPEEDMAX','JUMPS','PHYSIOLOAD','EXERTIONS','DISTANCE')
View(kin_final)
replacebadcells <- function(x) as.numeric(replace(x,(is.na(x) | as.numeric(x)==0) | is.nan(x),
mean(na.omit(as.numeric(x)))))
dates <- unique(kin_final$DATE)
problematic_metrics <- c('JUMP_HEIGHT_FLIGHT_TIME','CONCENTRIC_MAXIMUM_RFD')
vald$trial_date <- as.Date(vald$trial_date)
vald_wide <- pivot_wider(
vald,
id_cols = c(athlete_id,name,trial_date,test_id,trial_id),
names_from = metric_name,
values_from = value,
values_fn = median
)
vald_wide <- vald_wide[order(vald_wide$test_id),-1] # order necessary for reps
colnames(vald_wide) <- c('ATHLETE','DATE',
to_screaming_snake_case(colnames(vald_wide)[-(1:2)]))
reps <- vald_wide %>% group_by(TEST_ID) %>%
summarise(REP = 1:n()) %>% ungroup() %>% dplyr::select(REP) %>% as.matrix()
vald_final <-
cbind(reps,vald_wide)[
vald_wide2$DATE %in% dates &
as.numeric(vald_wide2$REP) <= 2, # first 2 reps only
c(2,3,1,6:(ncol(vald_wide))) # order columns
] %>%
dplyr::select(-(problematic_metrics)) %>%
mutate_at(c("ATHLETE", "REP", "DATE"), as.factor) %>%
mutate_if(is.numeric, replacebadcells) %>% # mean imputation
group_by(ATHLETE,DATE) %>% mutate_if(is.numeric,mean) %>%
distinct() %>% ungroup()
View(vald_final)
vald_final <-
cbind(reps,vald_wide)[
vald_wide2$DATE %in% dates &
as.numeric(vald_wide2$REP) <= 2, # first 2 reps only
c(2,3,1,6:(ncol(vald_wide))) # order columns
] %>%
dplyr::select(-(problematic_metrics)) %>%
mutate_at(c("ATHLETE", "REP", "DATE"), as.factor) %>%
mutate_if(is.numeric, replacebadcells) %>% # mean imputation
group_by(ATHLETE,DATE) %>% mutate_if(is.numeric,mean) %>%
ungroup() %>% dplyr::select(-REP) %>% distinct()
full_data <- merge(kin_final,vald_final,all.x = TRUE) |> na.exclude()
source('./reliability_testing.R')
instance <- get_reliability_instance(vald_final)
ML_data <- full_data[,as.logical(c(rep(1,10),0,reliable_index))] %>%
group_by(ATHLETE,DATE) %>% mutate_at(-(1:10),mean) %>% distinct()
instance <- get_reliability_instance(vald_final)
vald_final <-
cbind(reps,vald_wide)[
vald_wide2$DATE %in% dates &
as.numeric(vald_wide2$REP) <= 2, # first 2 reps only
c(2,3,1,6:(ncol(vald_wide))) # order columns
] %>%
dplyr::select(-(problematic_metrics)) %>%
mutate_at(c("ATHLETE", "REP", "DATE"), as.factor) %>%
mutate_if(is.numeric, replacebadcells) # mean imputation
full_data <- merge(kin_final,vald_final,all.x = TRUE) |> na.exclude()
instance <- get_reliability_instance(vald_final)
# reliable metrics for at least 4/5 players
reliable_index <- apply(instance,1,sum) >= 2
ML_data <- full_data[,as.logical(c(rep(1,10),0,reliable_index))] %>%
group_by(ATHLETE,DATE) %>% mutate_at(-(1:10),mean) %>% distinct()
View(ML_data)
View(full_data)
write.csv(ML_data,'./data/ML_data.csv')
scale_color_discrete
?scale_color_discrete()
pdf('./plots_summaries/scraped_metrics_time.pdf',width=10,height=8)
for(ath in unique(data_kinexon$ATHLETE)) {
kin_temp <- subset(kin_long,ATHLETE == ath)
plt <- ggplot(data = kin_temp,aes(x = TIME,y=VALUE,color=as.factor(HALF))) +
facet_wrap(~METRIC,scales='free') +
geom_point() +  theme_classic() + xlab('TIME') +
ggtitle(paste0('Kinexon Metrics for Player ',ath,' Over Time of Measurement')) +
geom_smooth(method = 'lm',lwd=1,fill = 'lightgray') +
scale_color_discrete(name = 'HALF')
print(plt)
}
graphics.off()
# Vald
replacebadcells <- function(x) as.numeric(replace(x,(is.na(x) |
as.numeric(x)==0) |
is.nan(x),
mean(na.omit(as.numeric(x)))))
vald_final <-
cbind(reps,vald_wide)[vald_wide2$DATE %in% dates & as.numeric(vald_wide2$REP) <= 2, # first 2 reps only
c(2,3,1,6:(ncol(vald_wide)))] %>% # order columns
dplyr::select(-(problematic_metrics)) %>%
mutate_at(c("ATHLETE", "REP", "DATE"), as.factor) %>%
mutate_if(is.numeric, replacebadcells) # mean imputation
kin <- read.csv('./data/kinexon_scraped.csv')
kin$time <- difftime(kin$dtstop, kin$dtstart,'UTC','mins')
kin$phasename <- factor(gsub("\\D", "", kin$phasename),levels = 1:10)
kin$half <- as.factor(ifelse(as.numeric(kin$phasename) <= 5,1,2))
# One observation per game half, two per person per game
kin_final <- subset(kin, phasename != "Segment 11 (OT)") %>% # no overtime
mutate_at(c("playerid","sessionid","phaseid"),as.factor) %>%
mutate_at(c("dtstart"), as.Date) %>%
group_by(playername,sessionid,half) %>%
summarize(
date = as.factor(dtstart),
time = as.numeric(sum(time)),
aal = sum(aal),
speedmax = max(speedmax),
jumps = sum(jumps),
physioload = sum(physioload),
exertions = sum(exertions),
distance = sum(distancetotal)
) %>% distinct() %>% ungroup() %>%
dplyr::select(-c(sessionid))
colnames(kin_final) <- c('ATHLETE','HALF','DATE','TIME','AAL','SPEEDMAX','JUMPS','PHYSIOLOAD','EXERTIONS','DISTANCE')
source('./reliability_testing.R')
instance <- get_reliability_instance(vald_final)
# reliable metrics for at least 4/5 players
reliable_index <- apply(instance,1,sum) >= 2
ML_data <- full_data[,c(rep(T,10),F,reliable_index)] %>%
group_by(ATHLETE,DATE) %>%
mutate_at(-(1:10),mean) %>% distinct() # average jump metrics over reps
write.csv(ML_data,'./data/ML_data.csv')
data <- read.csv('./data/ML_data.csv')[,-1]
data_kinexon <- data[,1:10]
data_kinexon$ATHLETE <- as.numeric(as.factor(data_kinexon$ATHLETE))
kin_long <- data_kinexon %>% pivot_longer(cols = 5:10,names_to = 'METRIC',values_to = 'VALUE')
pdf('./plots_summaries/scraped_kinexon_metrics.pdf',width=10,height=8)
for(ath in unique(data_kinexon$ATHLETE)) {
kin_temp <- subset(kin_long,ATHLETE == ath)
plt <- ggplot(data=kin_temp,aes(x=as.numeric(HALF),y=VALUE,color=DATE)) +
facet_wrap(~METRIC,scales='free') +
geom_line(lwd=0.75) + geom_point() +  theme_classic() + xlab('HALF') +
scale_x_continuous(breaks=1:10) +
ggtitle(paste0('Kinexon Metrics for Player ',ath))
print(plt)
}
graphics.off()
